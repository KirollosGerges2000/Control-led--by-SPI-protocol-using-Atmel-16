
software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000754  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037d  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 45 00 	jmp	0x8a	; 0x8a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "SPI.h"
#include "MACROS.h"
int main(void)
{
    /* Replace with your application code */
	INPUT_MODULE(DDRA,2);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	8a bb       	out	0x1a, r24	; 26
	
    while (1) 
    {
		if (READBIT_BIT(PORTA,2))
  72:	da 9b       	sbis	0x1b, 2	; 27
  74:	fe cf       	rjmp	.-4      	; 0x72 <main+0x6>
		{
			SPI_sendByte('l');
  76:	8c e6       	ldi	r24, 0x6C	; 108
  78:	0e 94 41 00 	call	0x82	; 0x82 <SPI_sendByte>
			while(READBIT_BIT(PORTA,2));
  7c:	da 99       	sbic	0x1b, 2	; 27
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
  80:	f8 cf       	rjmp	.-16     	; 0x72 <main+0x6>

00000082 <SPI_sendByte>:
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
}

void SPI_sendByte(unsigned char data)
{
	SPDR = data; //send data by SPI
  82:	8f b9       	out	0x0f, r24	; 15
	while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1 (data is sent correctly)
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <SPI_sendByte+0x2>
	//while(!(SPSR & (1<<7)));
}
  88:	08 95       	ret

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
