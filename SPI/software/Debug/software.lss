
software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a0  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "MACROS.h"

int main(void)
{
	
	DDRB &=(~(1<<0)); //switch 
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	87 bb       	out	0x17, r24	; 23
	
 SPI_MasterInit();
  72:	0e 94 43 00 	call	0x86	; 0x86 <SPI_MasterInit>
	while (1)
	{
		if(PINB&(1<<0))
  76:	b0 9b       	sbis	0x16, 0	; 22
  78:	fe cf       	rjmp	.-4      	; 0x76 <main+0xa>
		{
			
			SPI_MasterTransmit('l');
  7a:	8c e6       	ldi	r24, 0x6C	; 108
  7c:	0e 94 4f 00 	call	0x9e	; 0x9e <SPI_MasterTransmit>
			while(PINB&(1<<0));
  80:	b0 99       	sbic	0x16, 0	; 22
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
  84:	f8 cf       	rjmp	.-16     	; 0x76 <main+0xa>

00000086 <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = DDRB | (1<<PB4);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	87 bb       	out	0x17, r24	; 23
	DDRB = DDRB | (1<<PB5);
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	87 bb       	out	0x17, r24	; 23
	DDRB = DDRB | (1<<PB7);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 68       	ori	r24, 0x80	; 128
  96:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  98:	81 e5       	ldi	r24, 0x51	; 81
  9a:	8d b9       	out	0x0d, r24	; 13
  9c:	08 95       	ret

0000009e <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  9e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  a0:	77 9b       	sbis	0x0e, 7	; 14
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <SPI_MasterTransmit+0x2>
  a4:	08 95       	ret

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
