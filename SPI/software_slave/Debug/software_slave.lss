
software_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e1  00000000  00000000  0000086b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO.h"
#include "MACROS.h"
#include "SPI.h"
int main(void)
{
SPI_SlaveInit();
  6c:	0e 94 49 00 	call	0x92	; 0x92 <SPI_SlaveInit>
    /* Replace with your application code */
	DDRC |=(1<<0); //Led 
  70:	84 b3       	in	r24, 0x14	; 20
  72:	81 60       	ori	r24, 0x01	; 1
  74:	84 bb       	out	0x14, r24	; 20
	PORTC &=(~(1<<0)); //initially led  is closed
  76:	85 b3       	in	r24, 0x15	; 21
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	85 bb       	out	0x15, r24	; 21
    while (1) 
    {
		 char x =SPI_SlaveReceive();
  7c:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SlaveReceive>
		if(x)
  80:	88 23       	and	r24, r24
  82:	e1 f3       	breq	.-8      	; 0x7c <main+0x10>
		{
			TOGGLE_BIT(PORTC,0);
  84:	25 b3       	in	r18, 0x15	; 21
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	92 27       	eor	r25, r18
  8a:	95 bb       	out	0x15, r25	; 21

while(x== 'l');
  8c:	8c 36       	cpi	r24, 0x6C	; 108
  8e:	f1 f3       	breq	.-4      	; 0x8c <main+0x20>
  90:	f5 cf       	rjmp	.-22     	; 0x7c <main+0x10>

00000092 <SPI_SlaveInit>:
#include "SPI.h"

void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB &=(~(1<<4)); //switch 
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8f 7e       	andi	r24, 0xEF	; 239
  96:	87 bb       	out	0x17, r24	; 23
	DDRB &=(~(1<<5)); //switch 
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	87 bb       	out	0x17, r24	; 23
	DDRB &=(~(1<<7)); //switch 
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI */
	SPCR = (1<<SPE);
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	8d b9       	out	0x0d, r24	; 13
  a8:	08 95       	ret

000000aa <SPI_SlaveReceive>:
}
char SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fe cf       	rjmp	.-4      	; 0xaa <SPI_SlaveReceive>
	;
	/* Return data register */
	return SPDR;
  ae:	8f b1       	in	r24, 0x0f	; 15
  b0:	08 95       	ret

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
